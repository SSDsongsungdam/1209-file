웹 페이지에 그래픽을 출력하는 방법
사진이나 그림 : <img> 태그 이용
그래픽 : 자바 애플릿이나 플래시 등 플러그인 이용
-------------------------------------------------------------------------------
HTML5에서 캔버스 도입
도입 배경
플러그인 없이 자바스크립트 코드로 웹 페이지에 자유롭게 그래픽
모바일 단말기/PC를 포함하여 HTML5 표준 브라우저에서 작동

그래픽 기능
선, 원, 사각형, 곡선, 이미지, 2차원 문자
이미지 합성 및 변환

활용
웹 페이지에 실시간 그래프, 애니메이션, 대화형 게임, 지도

의미
웹이 문서를 보여주는 수준을 넘어 응용 프로그램으로 진화하는 계기
-------------------------------------------------------------------------------
캔버스(canvas) 객체 다루기
캔버스 공간 할당
캔버스 객체 찾기
캔버스 컨텍스트 얻어내기 : 캔버스에 그림 그리는 도구(컨텍스트) 얻어내기
캔버스에 사각형 그리기
캔버스의 크기, canvas의 width와 height 프로퍼티
캔버스의 스타일 제어
-------------------------------------------------------------------------------
그래픽 기능
도형 그리기와 칠하기
도형 그리기와 칠하기
글자 그리기
이미지 그리기
이미지 변환
클리핑
-------------------------------------------------------------------------------
도형 그리기
캔버스가 지원하는 도형의 종류
직선, 사각형, 원호
외곽선 그리기, 내부색으로 채워 그리기 모두 가능

도형 그리는 과정
경로(path) 만들기
캔버스에 경로에 담긴 도형 모두 그리기

경로(path) 만들기
그리고자 하는 도형들을 컨텍스트 내  경로에 담는 과정

캔버스에 도형 그리는 순서
beginPath() - 새로운 빈 경로 만들기
moveTo(), lineTo(), rect(), arc() - 경로에 도형 담기
Stroke() - 경로 속의 도형을 캔버스에 그리기
-------------------------------------------------------------------------------
도형 그리기 사례
경로 만들기
시작점 설정
경로에 도형 추가
캔버스에 그리기
-------------------------------------------------------------------------------
경로 닫기
closePath()
경로의 마지막 점과 시작점을 연결하는 직선 추가
더 이상 경로에 새로운 도형을 추가할 수 없음
beginPath()를 호출하면 새로운 경로 시작
-------------------------------------------------------------------------------
선 그리기와 사각형 그리기
선 그리는 컨텍스트 메소드
선그리기
moveTo()를 이용하여 시작점을 설정하고, lineTo()로 선을 연결해 나간다.
lineTo(x, y)에 지정한 (x,y)가 끝점이 된다.
-------------------------------------------------------------------------------
원호 그리기
원호를 그리는 arc() 메소드
각도는 3시에서 0도 시작
각도는 원주율로 표현
360도는 2파이, 90도는 파이/2이고, 180도는 파이
270도 -> 3파이/2 는 자바스크립트 코드 1.5*Math.PI 로 표현
원주률 r = n*Math.PI/180, 여기서 n은 각도(0~360)
-------------------------------------------------------------------------------
사각형 그리기
사각형 그리는 컨텍스트 메소드
예) (10, 10)에서 100x100 크기의 사각형 그리기
context.rect(10, 10, 100, 100);  // (10, 10)에서 100x100 크기의 사각형을 경로에 추가
context.stroke();  // context에 구성된 사각형을 캔버스에 그린다.

예) strokeRect() 메소드 이용 - 캔버스에 바로 그리기
context.strokeRect(10, 10, 100, 100);  // (10, 10)에서 100x100 크기의 사각형 그리기
-------------------------------------------------------------------------------
캔버스 지우기
캔버스에 그리진 그래픽을 모두 지울 때
context.clearRect(0, 0, canvas.width, canvas.height);

캔버스의 그래픽과 경로를 모두 지울 때
context.clearRect(0, 0, canvas.width, canvas.height);
context.beginPath();
-------------------------------------------------------------------------------
도형 꾸미기
선, 원호, 사각형, 글자 등의 색이나 굵기 조절
선 색 : strokeStyle 프로퍼티 이용
context.strokeStyle = "blue";
context.strokeStyle = "#0000FF";
context.strokeStyle = "rgb(0, 0, 255)";

채우기 색 : fillStyle 프로퍼티
context.fillStyle = "red";

선 굵기 : lineWidth 프로퍼티
context.lineWidth = 20;  // 선 굵기를 20픽셀로 지정
-------------------------------------------------------------------------------
칠하기
도형 내부를 칠하는 기능
원호 내부, 사각형 내부, 텍스트 내부 칠하기
칠하는 여러 방법
fillStyle 프로퍼티 : 원호나 사각형, 텍스트의 내부를 칠할 색 지정
context.fillStyle = "violet";

캔버스에 바로 칠하기 : fillRect()
fillStyle의 색으로 사각형 내부 채우기
context.fillStyle = "violet";
context.fillRect(20, 20, 100, 100);

경로에 닫힌 도형 칠하기 : fill()
fill()은 사각형과 원호 모두 적용
context.fillStyle = "violet";	
context.rect(20, 20, 100, 100);  // 경로에 사각형 삽입
context.fill();  // 경로내 도형 내부 칠하기
context.strokeStyle = "gray";
context.lineWidth = 10;
context.stroke();  // 경로내 도형 그리기(외곽선)
-------------------------------------------------------------------------------
텍스트 그리기
캔버스에 텍스트 그리기
비트맵 이미지로 캔버스에 글자 그리기(출력)
텍스트 그리기는 2가지 방법
텍스트의 외곽선만 그리기 - strokeText()
텍스트 외곽선 없이 내부를 채워 그리기 - fillText()
-------------------------------------------------------------------------------
텍스트 그리기 사례
폰트 설정 : font 프로퍼티 이용
예) context.font = “50px arial”;

정렬 설정 : textAlign 프로퍼티 이용
예) context.textAlign =“center”;

텍스트 외곽선 그리기
context.font = "50px arial"; 
context.strokeStyle = "blue"; 
context.lineWidth = 1; 
context.strokeText("Javascript", 30, 100); 

텍스트 채워 그리기
context.font = "50px arial"; 
context.fillStyle = "green"; 
context.fillText("Javascript", 30, 200);
-------------------------------------------------------------------------------
이미지 그리기
이미지 객체 생성
파일에서 읽은 이미지를 담을 객체 필요
var img = new Image();

이미지 그리는 과정
이미지 로딩과 onload
이미지 파일의 로딩이 완료된 후 이미지를 그린다.
1  img.onload = function () { 
2  	... // img 객체에 로드된 이미지를 그린다. 
3  }
4  img.src = "test.png"; // img 객체에 test.png 파일로부터 이미지의 로딩 시작

이미지 그리기
컨텍스트 객체의 drawImage() 메소드 이용
-------------------------------------------------------------------------------
drawImage()로 이미지 그리기 사례
(20, 20) 위치에 원본 크기로 그리기
var img = new Image();
img.onload = function () { 
	context.drawImage(img, 20, 20);
}
img.src = "test.png"; 

(20, 20) 위치에 100×200 크기로 그리기
var img = new Image();
img.onload = function () {
	context.drawImage(img, 20, 20, 100, 200); 
}
img.src = "test.png";

캔버스에 꽉 차게 이미지 그리기
var img = new Image();
img.onload = function () {
	context.drawImage(img, 0, 0, canvas.width, canvas.height);
}
img.src = "test.png";
-------------------------------------------------------------------------------
canvas 객체와 마우스 이벤트 활용
사용자가 마우스로 드래깅하여 캔버스 위에 자유롭게 
그림을 그리는 자바스크립트 응용 프로그램 작성
-------------------------------------------------------------------------------
웹의 저장소
초기 웹의 저장소
웹 서버에 저장
HTML 페이지, 이미지, 사용자 데이터, 웹 서비스 중간에 발생하는 일시적인 데이터

초기 웹 저장의 문제점
웹 사용의 폭발적 증가
웹 서버의 저장 용량에 대한 부담
웹 브라우저와 웹 서버 사이의 통신 트래픽 증가

HTML5의 웹 저장소
사용자의 로컬 컴퓨터에 일부 데이터 저장
웹 서버의 저장 용량 및 통신 트래픽 감소

저장소 종류
쿠키(Cookie)
웹 스토리지(Web Storage)
로컬 파일(Local File)
인덱스트 데이터베이스(Indexed DB)

웹 서버와 연결이 끊어진 경우에도 로컬 컴퓨터에도 웹 애플리케이션 실행
-------------------------------------------------------------------------------
HTTP 통신 과정 보기
첫 번째 HTTP 세션
익스플로러가 www.google.co.kr 웹 서버에 연결
디폴트 HTML 파일을 요청하고 응답 받았음
총 1.52초 걸렸다는 뜻

두 번째 HTTP 세션
<img>의 src 속성에 명시된 chrome-48.png을 구글 웹 서버에 요청
요청을 포함하여 이미지를 전송 받는데 거리는 시간 총 312ms
이미지의 크기는 2.20K
-------------------------------------------------------------------------------
쿠키
쿠키란?
웹 서버가 브라우저에게 지시하여 사용자 로컬 컴퓨터에 저장하는 4K 이하의 작은 데이터

쿠키의 도입 배경
HTTP의 통신의 기본 약점
브라우저와 웹서버 사이의 통신은 무상태(stateless) 프로토콜임
무상태 프로토콜
바로 이전 요청과 현재 요청이 연결되어 있음을 기억하지 않는 통신
예) 지금‘Java’를 검색하는 사용자가 바로 전에 ‘C++’를 검색한 사용자라는 사실을 모른다

쿠키는 HTTP 의 무상태 프로토콜의 약점을 보완하기 위해 도입
-------------------------------------------------------------------------------
쿠키 생성 및 사용 과정
1. 쿠키는 웹 서버가 생성하여 브라우저로 보냄
사용자가 어떤 웹 서버에 처음 접속할 때
웹 서버가 다음 요청에서 그 사용자를 기억할 수 있도록 쿠키(쿠키이름과 값)를 만들어 전송

2. 쿠키를 받은 브라우저는 로컬 컴퓨터에 저장

3. 로컬 컴퓨터에서 동일한 웹 서버에 요청할 때 쿠키를 함께 전송
웹 서버로 요청하는 경우 : 웹 페이지 요청, 이미지 요청 등 모든 웹 자원 요청 포함

4. 쿠키를 받은 웹 서버는 어떤 사용자로부터 요청이 왔는지 알 수 있음
-------------------------------------------------------------------------------
쿠키 데이터 구성과 사례
쿠키 구성 : 6 개의 속성으로 구성
브라우저가 웹 서버로 쿠키를 전송할 때는 name=value만 전송

쿠키 사례
age=23; expires=Mon, 01-Aug-2016 00:00:01 GMT; Domain=.google.com; Path=/; Secure; HttpOnly
브라우저가 google.com 사이트의 / 폴더에 있는 어떤 웹 자원이라도 요청할 때는 반드시 “age=23” 형태로 쿠키 전송
유효 시간은 2016년 8월 1일까지, 안전한 통신을 사용할 때만 쿠키 사용
구글 사이트와 HTTP 통신 외에 이 쿠키를 알려주어서는 안 됨 
-------------------------------------------------------------------------------
NID 쿠키 저장 및 활용
브라우저는 NID 쿠키를 쿠키 파일에 저장
브라우저는 google.com 도메인의 웹 페이지를 요청할 때마다 NID 쿠키 함께 전송
-------------------------------------------------------------------------------
자바스크립트로 쿠키 다루기
자바스크립트 코드를 이용하여 로컬 컴퓨터에 쿠키쓰기/읽기 가능
자바스크립트에서 쿠키 접근 : document.cookie
윈도우에 출력된 웹 페이지를 전송한 웹 서버 모든 쿠키들이 문자열 형태로 연결
쿠키 쓰기
document.cookie에 쿠키를 문자열 형태로 달아주면 됨
쿠키 읽기
-------------------------------------------------------------------------------
웹 스토리지(Web Storage)
웹 스토리지 필요성
웹은 웹 애플리케이션의 형태로 진화
웹 문서를 보여주기나 검색, 구매 등 정보 소통 수단을 넘어섬
웹 애플리케이션 사례) 게임, 그림 그리기, 학습
웹 애플리케이션은 실행 도중 로컬 컴퓨터에 데이터 저장 공간 필요
예) 게임 웹 애플리케이션 : 사용자 이름, 점수, 최고 점수자의 이름과 점수 등
예) 쇼핑몰 : 사용자가 구입하려고 담은 리스트
HTML5에서 웹 스토리지(web storage) 도입
사용자 로컬 컴퓨터의 저장 공간
웹 서버의 저장 부담과 네트워크 트래픽 감소
HTML5 웹 스토리지는 오직 자바스크립트로만 읽고 쓸 수 있음

쿠키의 한계
쿠키의 크기는 4KB로 제한- 충분한 량의 정보 저장 한계
쿠키는 불필요한 트래픽 발생
브라우저가 웹 서버에 요청을 보낼 때마다 함께 전송하기 때문
쿠키는 윈도우마다 독립적인 값을 저장 불가
브라우저의 모든 윈도우들이 공유하므로
-------------------------------------------------------------------------------
웹 스토리지 종류와 특징
웹 스토리지 : 세션스토리지(session storage)와 로컬스토리지(local storage)

웹 스토리지의 특징
문자열만 저장
(키, 값)으로 구성된 아이템 단위로 저장
동일한 ‘키’를 가진 아이템은 존재할 수 없음
‘키’와 ‘값’ 문자열은 대소문자 구분
저장, 검색, 삭제 등 웹 스토리지의 조작은 모두 자바스크립트 코드로 작성
-------------------------------------------------------------------------------
로컬 스토리지
로컬 스토리지의 생성과 소멸, 공유
윈도우에 상관없이 웹 서버(웹 사이트) 당 하나 씩 생성
브라우저 종료하거나 컴퓨터가 커져도 존재
웹 사이트의 모든 웹 페이지가 로컬 스토리지 공유

로컬 스토리지의 용도
오프라인상태에서 웹 애플리케이션이 로컬 컴퓨터의 로컬 스토리지에 저장 가능
-------------------------------------------------------------------------------
자바스크립트로 웹 스토리지 다루기
Storage 인터페이스 : 자바스크립트로 웹 스토리지 읽기/쓰기 
브라우저가 제공
윈도우에 웹 페이지가 로드되면, 세션 스토리지와 로컬 스토리지 자동 생성
sessionStorage, localStorage, window.sessionStorage, window.localStorage
Storage 인터페이스의 프로퍼티와 메소드
자바스크립트 코드로 웹 스토리지 액세스를 위한 객체
-------------------------------------------------------------------------------